/*
 * Main_Window.java
 *
 * Created on 8 ottobre 2007, 13.50
 */
package base_simulator;

import SatelliteNetwork.NetworkLayerSatellite;
import SatelliteNetwork.NodoSatellite;
import SatelliteNetwork.Spot;
import base_simulator.layers.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;

import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import test1.*;
import javax.swing.tree.*;
import org.jdom2.*;
import org.jdom2.input.*;
import java.util.*;


import javax.swing.*;

/**
 *
 * @author franco
 */
public class Main_Window extends javax.swing.JFrame implements Runnable {

    /**
     * Creates new form Main_Window
     */
    public Main_Window() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        popupMenu1 = new java.awt.PopupMenu();
        endedSim = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tracing = new javax.swing.JCheckBox();
        orizons = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        progressBar = new javax.swing.JProgressBar();
        fileConfigurazione = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tempoSimulazioneText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        numeroSpotText = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        popupMenu1.setLabel("PopupMenu");

        endedSim.setTitle("Simulazione terminata");
        endedSim.setBackground(java.awt.Color.white);
        endedSim.setBounds(new java.awt.Rectangle(0, 0, 320, 320));
        endedSim.setIconImage(null);
        endedSim.getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel5.setFont(new java.awt.Font("Bodoni MT Black", 0, 14));
        jLabel5.setText("Simulazione Terminata con successo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        endedSim.getContentPane().add(jLabel5, gridBagConstraints);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/base_simulator/close_ico.png"))); // NOI18N
        jButton5.setText("Close Panel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 7;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.insets = new java.awt.Insets(74, 0, 0, 0);
        endedSim.getContentPane().add(jButton5, gridBagConstraints);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simulatore per Genetico");
        setBackground(new java.awt.Color(254, 254, 254));
        setForeground(java.awt.Color.orange);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jPanel2.setAutoscrolls(true);
        jPanel2.setMinimumSize(new java.awt.Dimension(640, 480));

        tracing.setFont(new java.awt.Font("Century Schoolbook L", 1, 10));
        tracing.setText("Abilita trace");
        tracing.setToolTipText("Se selezionato abilita il trace nel simulatore");
        tracing.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        orizons.setText("10");

        jLabel4.setFont(new java.awt.Font("Century Schoolbook L", 1, 10));
        jLabel4.setText("Tempo in minuti della simulazione");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setLayout(new java.awt.GridLayout(2, 2, 2, 2));

        jButton1.setFont(new java.awt.Font("Century Schoolbook L", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/base_simulator/Start_ico.png"))); // NOI18N
        jButton1.setText("Inizia Simulazione");
        jButton1.setToolTipText("Inizia la simulazione con valori di default");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jButton1KeyTyped(evt);
            }
        });
        jPanel1.add(jButton1);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/base_simulator/open.png"))); // NOI18N
        jButton3.setText("Carica File");
        jButton3.setToolTipText("Carica configurazione da file XML");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton2.setFont(new java.awt.Font("Century Schoolbook L", 1, 12));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/base_simulator/player_pause_ico.png"))); // NOI18N
        jButton2.setText("Pause");
        jButton2.setToolTipText("Mette in pausa il simulatore");
        jPanel1.add(jButton2);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/base_simulator/Volume Manager_ico.png"))); // NOI18N
        jButton4.setText("Stat");
        jButton4.setToolTipText("Visualizza statistiche solo dopo la fine della simulazione");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(tracing, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(orizons, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(196, 196, 196)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(orizons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tracing))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(10, 10, 780, 120);

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));

        logText.setColumns(20);
        logText.setRows(5);
        jScrollPane1.setViewportView(logText);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        progressBar.setToolTipText("Progresso della simulazione");

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel1.setText("Percorso file di configurazione");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel2.setText("Tempo di simulazione");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 10));
        jLabel3.setText("Numero spot satellite");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 545, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileConfigurazione, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(tempoSimulazioneText, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(numeroSpotText, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 320, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileConfigurazione, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tempoSimulazioneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numeroSpotText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Stato Simulatore", jPanel3);

        getContentPane().add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 140, 780, 370);

        jMenu1.setText("File");

        jMenu3.setText("Simulazione");

        jMenuItem1.setText("Create new simulation");
        jMenuItem1.setRolloverEnabled(true);
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("Pause");
        jMenu3.add(jMenuItem2);

        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @brief Utilizzando questo metodo posso cofigurare e lanciare la
     * simulazione, decidere quanti nodi fanno parte della simulazione e le loro
     * caratteristiche
     * @param evt
     */
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked

//TODO : Faccio inviare un messaggio di benvenuto dal satellite verso tutte le hap coperte
        //Lancio il simulatore
        //s.appartenenze = app;
        
        new Thread(s).start();
//        s.start();
    }//GEN-LAST:event_jButton1MouseClicked

private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked

}//GEN-LAST:event_jMenuItem1MouseClicked

private void jButton1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton1KeyTyped
// TODO add your handling code here:
}//GEN-LAST:event_jButton1KeyTyped

    /**
     * Questo metodo permette di selezionare un file di input per leggere la
     * configurazione della simulazione
     *
     * @param evt
     */
private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    /*Attraverso questo evento vado a caricare il file di configurazione XML
      in conf.txt viene salvato l'ultimo file aperto in modo da avere una preferenza
      * sul file da aprire
     */
    try {
        JFileChooser fileChooser = new JFileChooser();

        fileChooser.setDialogTitle("Seleziona il file per la configurazione XML");
        File f = new File("conf.txt");

        if (f.exists()) {
            System.out.println("Trovato un file di configurazione precedente");
            BufferedReader br = new BufferedReader(new FileReader("conf.txt"));
            String filePath = br.readLine();
            if (!(filePath == null)) {
                File f1 = new File(filePath);
                fileChooser.setCurrentDirectory(f1);
            } else {
                fileChooser.setCurrentDirectory(f);
            }
            br.close();
        }

        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == fileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            //This is where a real application would open the file.
            System.out.println("Opening: " + file.getName());
            this.fileConfigurazione.setText(file.getName());
            //Salvo il percorso in un file che mi ricorda la preferenza
            BufferedWriter bw = new BufferedWriter(new FileWriter("conf.txt"));
            bw.write(file.getPath());
            leggiIlFileXML(file.getPath());
            bw.close();
        } else {
            System.out.println("Open command cancelled by user.");
        }
    } catch (Exception e) {
        System.out.println("Eccezzione\n");
        e.printStackTrace();
    }
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    //Vuol dire che posso prelevare le statistiche dagli oggetti del simulatore
    logText.setText("");
    for (int i = 0; i < oggettiStatistici.size(); i++) {
        logText.append("\nOggetti Statistici [" + i + "]  " + oggettiStatistici.elementAt(i).getTipo() + " " + oggettiStatistici.elementAt(i).getStat());
        logText.append("\n----------------------------------------------------------------------------------------------------------------");
    }

}//GEN-LAST:event_jButton4ActionPerformed

private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
// TODO add your handling code here:
    endedSim.show(false);
}//GEN-LAST:event_jButton5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
/*                try {
                    // select Look and Feel
                    UIManager.setLookAndFeel("com.jtattoo.plaf.smart.SmartLookAndFeel");
                    // start application

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                */
                new Main_Window().setVisible(true);

            }
        });
    }

    //Genero un nodo satellite
    private NodoSatellite generaSatellite(scheduler s, int id_nodo, Grafo g, int numero_spot, double periodoInfoServices) {
        physicalLayer pl = new physicalLayer(s, 10);
        LinkLayer ll = new LinkLayer(s, 10);
        NetworkLayerSatellite nl = new NetworkLayerSatellite(s, 10, periodoInfoServices);
        TransportLayer tl = new TransportLayer(s,10);
        NodoSatellite n = new NodoSatellite(s, id_nodo, pl, ll, nl,tl, g, "nodoSatellite", numero_spot, periodoInfoServices);
        return n;
    }

    private nodo_hap generaHap(scheduler s, int id_nodo, Grafo g, NodoSatellite sat, canale hapSat, double capacita, double dim_pacchetto, double tempo_propagazione) {

        physicalLayer pl = new physicalLayer(s, 10);
        LinkLayer ll = new LinkLayer(s, 10);
        netLayerNodo nl = new netLayerNodo(s, 10);
        TransportLayer tl = new TransportLayer(s,10);
        nodo_hap h1 = new nodo_hap(s, id_nodo, pl, ll, nl,tl, g, sat, hapSat, capacita, dim_pacchetto, tempo_propagazione);
        return h1;
    }

    private void connettiH(nodo_hap h1, nodo_hap h2) {
        h1.aggiungiVicinoHap(h2);
        h2.aggiungiVicinoHap(h1);
    }

    private void connettiHS(nodo_hap h, NodoSatellite sat, int id_spot) {
        /*Aggiungo il nodo hap al satellite e collego il canale di downlink sat-hap, 
         perch� il canale di downlink viene generato all'interno del satellite*/
        sat.aggiungiVicinoRouter(h, id_spot);
    }

    private nodo_host generaHost(scheduler s, int id_nodo, Object router, canale canaleUpLink, Grafo g, double rate) {

        physicalLayer pl = new physicalLayer(s, 10);
        LinkLayer ll = new LinkLayer(s, 10);
        NetworkLayer nl = new netLayer(s, 10);
        //Oggetto router rappresenta l'hap di collegamento
        //Oggetto canaleUplink è il canale condiviso da tutti i terminali
        TransportLayer tl = new TransportLayer(s,10);
        nodo_host h = new nodo_host(s, id_nodo, pl, ll, nl,tl, router, canaleUpLink, g, rate);
        canaleUpLink.addNodiSorgente(h);
        return h;
    }

    private void connettiHHst(nodo_host ht, nodo_hap h) {
        /*Come per il nodo satellite aggiungo il nodo host sul canale di downlink
         che viene creato all'interno dell'hap al momento dell'istanza della classe*/
        h.aggiungiVicinoTerminaleTerrestre(ht);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog endedSim;
    private javax.swing.JTextField fileConfigurazione;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea logText;
    private javax.swing.JTextField numeroSpotText;
    private javax.swing.JTextField orizons;
    private java.awt.PopupMenu popupMenu1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField tempoSimulazioneText;
    private javax.swing.JCheckBox tracing;
    // End of variables declaration//GEN-END:variables
    scheduler s;
    Vector<Entita> oggettiStatistici = new Vector<Entita>();
    //Creo la lista degli oggetti che andr� a controllare con gli eventi del simulatore
    LinkedList satObject = new LinkedList();
    LinkedList hapObject = new LinkedList();
    LinkedList nodeObject = new LinkedList();
    LinkedList allNode = new LinkedList();

    @Override
    public void run() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void leggiIlFileXML(String path) {
        try {

            //Ripulisco la lista degli oggetti per effettuare una nuova simulazione
            satObject.clear();
            hapObject.clear();
            nodeObject.clear();
            allNode.clear();
            this.oggettiStatistici.clear();
            //Creo il Simulation Scheduler
            double max_time = Double.valueOf(orizons.getText()).doubleValue() * 60000;
            ArrayList<appartenenzaHostNodi> app = new ArrayList<appartenenzaHostNodi>();
            s = new scheduler(max_time, true, app);

            boolean traced = this.tracing.isSelected();
            Grafo G = new Grafo(2);

            //Creo un SAXBuilder e con esco costruisco un document
            SAXBuilder builder = new SAXBuilder();
            Document document = builder.build(new File(path));

            //Prendo la radice
            Element root = document.getRootElement();

            //Estraggo la configurazione dei canali dalla radice
            List canali = root.getChildren("canale");
            Iterator ic = canali.iterator();
            List listaCanali = new LinkedList();

            while (ic.hasNext()) {
                Element item = (Element) ic.next();
                double capacita = Double.valueOf(item.getAttributeValue("capacita")).doubleValue();
                double dim_pkt = Double.valueOf(item.getAttributeValue("dim_pacchetto")).doubleValue();
                double tempo_propagazione = Double.valueOf(item.getAttributeValue("tempo_propagazione")).doubleValue();
                canale can = new canale(s, capacita, dim_pkt, tempo_propagazione);
                listaCanali.add(can);
            }

            List children = root.getChildren("Satellite");
            Iterator iterator = children.iterator();

            //Per ogni figlio
            while (iterator.hasNext()) {
                Element item = (Element) iterator.next();
                //Element description = item.getChild("DESCR");
                System.out.println("*" + item.getChildText("DESCR"));
                int numero_spot = Integer.valueOf(item.getAttributeValue("spot"));
                System.out.println("\tNumero di spot : " + numero_spot);
                List canaleUpLinkSat = new LinkedList();
                ic = listaCanali.iterator();
                canale c = (canale) ic.next();

                //Per ogni spot creo un canale di Uplink
                for (int i = 0; i < numero_spot; i++) {
                    canale cUp = new canale(s, c.returnCapacita(), c.getDimensione_pacchetto(), c.getTempo_di_propagazione());
                    canaleUpLinkSat.add(cUp);
                }

                //Canale di hapLink base per hap
                /**
                 * *******************************GESTIONE NODO SATELLITE*******************************************
                 */
                //Creo adesso il nodo satellite
                int id_nodo = Integer.valueOf(item.getAttributeValue("id")).intValue();
                System.out.println("\tID : " + id_nodo);
                double periodoInfoServices = item.getAttribute("periodoInfoServices").getDoubleValue();
                NodoSatellite n1 = this.generaSatellite(s, id_nodo, G, numero_spot, periodoInfoServices);
                satObject.add(n1);
                allNode.add(n1);
                oggettiStatistici.add(n1); //mi permette di filtrare il satellite nelle statistiche finali
                this.numeroSpotText.setText("" + numero_spot);//Aggiorno la GUI

                //Il canale prende il satellite come nodo destinazione
                Iterator canaleUpLinkSatellite_it = canaleUpLinkSat.iterator();
                for (int i = 0; i < numero_spot; i++) {
                    canale cUp = (canale) canaleUpLinkSatellite_it.next();
                    cUp.addNodoalCanale(n1);
                    //faccio conoscere al satellite il proprio canale di uplink, il secondo parametro � l'id dello spot
                    n1.addCanaleUpLink(cUp, i);
                }

                /**
                 * *************************************************************************************************
                 */
                List haps = item.getChildren("hap");
                Iterator i = haps.iterator();

                while (i.hasNext()) {
                    Element hap = (Element) i.next();
                    System.out.println("Descrizione hap :" + hap.getChild("descrizione").getText());
                    id_nodo = Integer.valueOf(hap.getAttributeValue("id")).intValue();
                    System.out.println("id :" + id_nodo);
                    int id_spot = Integer.valueOf(hap.getAttributeValue("spotID")).intValue();
                    System.out.println("id_spot :" + id_spot);
                    //Creo il nodo hap con id successivo
                    canaleUpLinkSatellite_it = canaleUpLinkSat.iterator();
                    canale satUplink2 = null;
                    for (int j = 0; j <= id_spot; j++) {
                        if (j == id_spot) {
                            satUplink2 = (canale) canaleUpLinkSatellite_it.next();
                        } else {
                            canaleUpLinkSatellite_it.next();
                        }
                    }
                    int id_ihl = 1; // id IHL nella lista canali creata all'inizio
                    Iterator cIHLi = listaCanali.iterator();
                    canale cIHL = null;
                    int cont = 0;
                    while (cIHLi.hasNext() && cont <= id_ihl) {
                        cIHL = (canale) cIHLi.next();
                        cont++;
                    }
                    nodo_hap h1 = this.generaHap(s, id_nodo, G, n1, satUplink2, cIHL.returnCapacita(), cIHL.getDimensione_pacchetto(), cIHL.getTempo_di_propagazione());
                    hapObject.add(h1);
                    allNode.add(h1);
                    oggettiStatistici.add(h1); //Aggiungo l'hap negli oggetti da filtrare per fare le statistiche
                    satUplink2.addNodiSorgente(h1); //Aggiungo la prima hap al canale di uplink che corrisponde al II spot del satellite
                    this.connettiHS(h1, n1, id_spot); //Connetto l'hap al satellite e metto l'hap nel canale di downlink del satellite sul secondo spot         

                    List nodes = hap.getChildren("nodo");

                    Iterator in = nodes.iterator();
                    while (in.hasNext()) {

                        Element nodo = (Element) in.next();
                        id_nodo = nodo.getAttribute("id").getIntValue();
                        System.out.println("Id del nodo :" + nodo.getAttributeValue("id"));
                        String tipoHost = nodo.getAttributeValue("tipo");
                        System.out.println("tipo :" + nodo.getAttributeValue("tipo"));
                        double rate = Double.valueOf(nodo.getAttributeValue("rate")).doubleValue();
                        System.out.println("rate :" + rate);
                        String tipoTx = nodo.getAttributeValue("tx");
                        System.out.println("tx :" + nodo.getAttributeValue("tx"));
                        String tipoRx = nodo.getAttributeValue("rx");

                        System.out.println("rx :" + nodo.getAttributeValue("rx"));
                        Iterator ich = canali.iterator();
                        boolean trovato = false;
                        canale hapUplink1 = null;
                        item = null;
                        while (!trovato && ich.hasNext()) {
                            item = (Element) ich.next();
                            String tipo = item.getAttributeValue("tipo");
                            if (tipo.equals("HAP")) {
                                trovato = true;
                            }
                        }
                        double capacita = Double.valueOf(item.getAttributeValue("capacita")).doubleValue();
                        double dim_pkt = Double.valueOf(item.getAttributeValue("dim_pacchetto")).doubleValue();
                        double tempo_propagazione = Double.valueOf(item.getAttributeValue("tempo_propagazione")).doubleValue();
                        hapUplink1 = new canale(s, capacita, dim_pkt, tempo_propagazione);
                        //Setto l'hap1 come destinazione del canale 
                        hapUplink1.addNodoalCanale(h1);
                        //Aggiungo il canale di hapLink all'hap
                        h1.addCanaleUplinkHost(hapUplink1);
                        nodo_host terminale1 = this.generaHost(s, id_nodo, traced, hapUplink1, G, rate);
                        terminale1.setMyRouter(h1);
                        terminale1.setTipoHost(tipoHost);
                        terminale1.setTipoServizioRX(tipoRx);
                        terminale1.setTipoServizioTX(tipoTx);
                        hapUplink1.addNodiSorgente(terminale1);

                        oggettiStatistici.add(terminale1);
                        //aggiungo l'oggetto nodo host alla lista per poi controllare gli eventi del simulatore
                        nodeObject.add(terminale1);
                        allNode.add(terminale1);
                        connettiHHst(terminale1, h1);
                    }

                }

                //****************************INIZIO GESTIONE EVENTI******************************************/
                List events = root.getChildren("Eventi");
                Iterator ie = events.iterator();
                //Scorro la lista degli eventi
                while (ie.hasNext()) {

                    Element e = (Element) ie.next();
                    //Gestisco gli eventi Path
                    List paths = e.getChildren("path");
                    Iterator ipath = paths.iterator();
                    while (ipath.hasNext()) {
                        Element epath = (Element) ipath.next();
                        int id_nodo_S = epath.getAttribute("idSorgente").getIntValue();
                        int id_nodo_D = epath.getAttribute("idDestinazione").getIntValue();
                        double time = epath.getAttribute("tempo").getDoubleValue();
                        nodo_host nodo_sorgente = (nodo_host) trovaNodo(id_nodo_S, allNode);
                        Object nodo_destinazione = trovaNodo(id_nodo_D, allNode);
                        nodo_sorgente.inviaPath(time, nodo_destinazione);
                    }

                    //Gestisco gli eventi di disconnessione
                    List disconnetti = e.getChildren("disconnetti");
                    Iterator idisc = disconnetti.iterator();
                    while (idisc.hasNext()) {
                        Element ediscon = (Element) idisc.next();
                        int id_nodo_S = ediscon.getAttribute("idSorgente").getIntValue();
                        int id_nodo_D = ediscon.getAttribute("idDestinazione").getIntValue();
                        double time = ediscon.getAttribute("tempo").getDoubleValue();
                        nodo_host nodo_sorgente = (nodo_host) trovaNodo(id_nodo_S, allNode);
                        Object nodo_destinazione = trovaNodo(id_nodo_D, allNode);
                        nodo_sorgente.disconnettiTerminale(time, nodo_destinazione);
                    }

                    //Gestisco gli eventi di disconnessione
                    List attiva = e.getChildren("attivazioneRicevitori");
                    Iterator iattiva = attiva.iterator();
                    while (iattiva.hasNext()) {
                        Element eIAttiva = (Element) iattiva.next();
                        List listAttiva = eIAttiva.getChildren("nodo");
                        Iterator iListAttiva = listAttiva.iterator();
                        while (iListAttiva.hasNext()) {
                            Element elemNodo = (Element) iListAttiva.next();
                            int id_nodo_Evento = elemNodo.getAttribute("id").getIntValue();
                            double tempo_Evento = elemNodo.getAttribute("tempo").getDoubleValue();
                            nodo_host nEvento = (nodo_host) this.trovaNodo(id_nodo_Evento, allNode);
                            Messaggi m = new Messaggi("attivaNodoRicevente", nEvento, nEvento, nEvento, tempo_Evento);
                            m.saliPilaProtocollare = true;
                            s.insertMessage(m);
                        }
                    }
                }

                //Devo adesso controllare le hap vicine in modo da creare l'hapMesh
                List listHapVicine = root.getChildren("hapVicina");
                Iterator iteratoreHapVicine = listHapVicine.iterator();
                //Devo creare IHL dell'hap;

                while (iteratoreHapVicine.hasNext()) {
                    Element elementoHapVicina = (Element) iteratoreHapVicine.next();
                    int id_hap = elementoHapVicina.getAttribute("id_nodo_hap").getIntValue();
                    nodo_hap hap = (nodo_hap) trovaNodo(id_hap, allNode);
                    int id_hap_vicina = elementoHapVicina.getAttribute("id_nodo_hap_vicina").getIntValue();
                    nodo_hap hapVicina = (nodo_hap) trovaNodo(id_hap_vicina, allNode);
                    hap.aggiungiVicinoHap(hapVicina);
                }

                //****************************INIZIO GESTIONE GRAFO******************************************/
                List lgrafo = root.getChildren("Grafo");
                Iterator igrafo = lgrafo.iterator();
                while (igrafo.hasNext()) {
                    Element grafo = (Element) igrafo.next();
                    int sizeGrafo = grafo.getAttribute("size").getIntValue();
                    int numero_pesi = grafo.getAttribute("pesi").getIntValue();
                    Grafo g = new Grafo(sizeGrafo);
                    //Devo adesso scorrere tutti gli elementi della lista grafo per poi creare gli elementi del grafo
                    List lLink = grafo.getChildren("link");
                    Iterator iLink = lLink.iterator();
                    while (iLink.hasNext()) {
                        Element eLink = (Element) iLink.next();
                        String tipoLink = eLink.getAttribute("tipo").getValue();
                        int nodo1 = eLink.getAttribute("n1").getIntValue();
                        int nodo2 = eLink.getAttribute("n2").getIntValue();
                        double delay = eLink.getAttribute("delay").getDoubleValue();
                        double banda = eLink.getAttribute("banda").getDoubleValue();
                        double costo = eLink.getAttribute("costo").getDoubleValue();
                        if (tipoLink.equals("full")) {
                            //Indica che il Link � di tipo fullDuplex
                            Link l = new Link();
                            ArrayList<Double> lista = new ArrayList<Double>();
                            lista.add(costo);
                            lista.add(delay);
                            lista.add(banda);
                            l.setPesi(lista);
                            g.setArco(nodo1, nodo2, l);
                            g.setArco(nodo2, nodo1, l);
                        } else {
                            Link l = new Link();
                            ArrayList<Double> lista = new ArrayList<Double>();
                            lista.add(costo);
                            lista.add(delay);
                            lista.add(banda);
                            l.setPesi(lista);
                            g.setArco(nodo1, nodo2, l);
                        }
                    }
                    s.setGrafo(g);
                }

            }

        } catch (Exception e) {
            System.out.println("ERRORE");
            e.printStackTrace();
        }
    }

    /**
     * Questo metodo viene utilizzato per trovare un oggetto partendo dal suo
     * ID, lo uso quando devo generare gli eventi da aggiungere allo scheduler
     *
     * @param id_nodo
     * @param allNode
     * @return
     */
    private Object trovaNodo(int id_nodo, LinkedList allNode) {
        Object o = null;
        Iterator e = allNode.iterator();
        boolean trovato = false;
        while (e.hasNext() && !trovato) {
            Nodo item = (Nodo) e.next();
            if (item.getId() == id_nodo) {
                trovato = true;
                o = item;
            }
        }
        return o;
    }
}
